// <auto-generated />
using System;
using GRC.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GRC.Infrastructure.Migrations
{
    [DbContext(typeof(GRCContext))]
    [Migration("20201123151009_RemoveIdentity")]
    partial class RemoveIdentity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("GRC.Core.Entities.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AnswerText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("AnswerValue")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<double>("Point")
                        .HasColumnType("float");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionaryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuestionaryId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("GRC.Core.Entities.Control", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("DomainId")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("DomainId");

                    b.ToTable("Controls");
                });

            modelBuilder.Entity("GRC.Core.Entities.Domain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("StandardId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("StandardId");

                    b.ToTable("Domains");
                });

            modelBuilder.Entity("GRC.Core.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ControlId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Group")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ControlId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("GRC.Core.Entities.QuestionAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCorrectAnswer")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionAnswers");
                });

            modelBuilder.Entity("GRC.Core.Entities.Questionary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<double>("CalculatedCompliance")
                        .HasColumnType("float");

                    b.Property<int>("ComplianceLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OwnerUid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StandardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StandardId");

                    b.ToTable("Questionaries");
                });

            modelBuilder.Entity("GRC.Core.Entities.Standard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("int");

                    b.Property<int>("StandardCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StandardCategoryId");

                    b.ToTable("Standards");
                });

            modelBuilder.Entity("GRC.Core.Entities.StandardCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("StandardCategories");
                });

            modelBuilder.Entity("GRC.Core.Entities.Answer", b =>
                {
                    b.HasOne("GRC.Core.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GRC.Core.Entities.Questionary", "Questionary")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Questionary");
                });

            modelBuilder.Entity("GRC.Core.Entities.Control", b =>
                {
                    b.HasOne("GRC.Core.Entities.Domain", "Domain")
                        .WithMany("Controls")
                        .HasForeignKey("DomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Domain");
                });

            modelBuilder.Entity("GRC.Core.Entities.Domain", b =>
                {
                    b.HasOne("GRC.Core.Entities.Standard", "Standard")
                        .WithMany("Domains")
                        .HasForeignKey("StandardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Standard");
                });

            modelBuilder.Entity("GRC.Core.Entities.Question", b =>
                {
                    b.HasOne("GRC.Core.Entities.Control", "Control")
                        .WithMany("Questions")
                        .HasForeignKey("ControlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Control");
                });

            modelBuilder.Entity("GRC.Core.Entities.QuestionAnswer", b =>
                {
                    b.HasOne("GRC.Core.Entities.Question", "Question")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("GRC.Core.Entities.Questionary", b =>
                {
                    b.HasOne("GRC.Core.Entities.Standard", "Standard")
                        .WithMany("Questionaries")
                        .HasForeignKey("StandardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Standard");
                });

            modelBuilder.Entity("GRC.Core.Entities.Standard", b =>
                {
                    b.HasOne("GRC.Core.Entities.StandardCategory", "StandardCategory")
                        .WithMany("Standards")
                        .HasForeignKey("StandardCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StandardCategory");
                });

            modelBuilder.Entity("GRC.Core.Entities.Control", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("GRC.Core.Entities.Domain", b =>
                {
                    b.Navigation("Controls");
                });

            modelBuilder.Entity("GRC.Core.Entities.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("GRC.Core.Entities.Questionary", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("GRC.Core.Entities.Standard", b =>
                {
                    b.Navigation("Domains");

                    b.Navigation("Questionaries");
                });

            modelBuilder.Entity("GRC.Core.Entities.StandardCategory", b =>
                {
                    b.Navigation("Standards");
                });
#pragma warning restore 612, 618
        }
    }
}
